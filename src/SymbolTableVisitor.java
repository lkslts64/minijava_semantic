package myvisitors;
//
// Generated by JTB 1.3.2 DIT@UoScope patched
//

import symboltable.ClassScope;
import symboltable.FuncSignature;
import symboltable.Scope;
import symboltable.SymbolTable;
import syntaxtree.*;
import java.util.*;
import visitor.GJDepthFirst;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SymbolTableVisitor extends GJDepthFirst<String,Scope> {


   public SymbolTable symbolTable;
   private boolean error;

   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public String visit(NodeToken n, Scope argu) { return n.tokenImage; }

   //
   // User-generated visitor methods below
   //
    public SymbolTableVisitor() {
       symbolTable = new SymbolTable();
       error = false;
    }
    public void printErrMsg(String err) {
        System.out.println(err);
        error  = true;
    }
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n, Scope argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if ( symbolTable.checkUndeclared() == false )
          printErrMsg(">Error: undeclared type(s)");
      System.out.println(error);
      if (this.error ==  true)
          return "ERROR";
      return "OK";
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   //String type pushed to hashtble as String-Unknown.
   public String visit(MainClass n, Scope argu) {
      String _ret=null;

       String curr = n.f1.accept(this,null);
       if ( symbolTable.isDeclared(curr) == true) {
           printErrMsg(">Error: Class " + curr + " declared more than once.Parser will not parse the contents of this class.");
           return _ret;
       }
       else {
           symbolTable.addKnownTypes(curr);
       }
       //Maybe: code inside --- is optional(except new Scope();).
       //---------------------------
       ClassScope classScope = new ClassScope(0,0,curr);
       boolean res = symbolTable.putClassHash(curr,classScope);
       if ( res == false)
           printErrMsg(">PANIC we should have catched this error before.Error: Class declared more than once.");
       String fn = n.f6.accept(this,argu);
       Scope scope = new Scope(fn);
       symbolTable.putScopeInheritanceChain(scope,classScope);
       //------------------------------
       symbolTable.putFuncHash(fn,curr,scope);
       n.f14.accept(this,scope);
       return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, Scope argu) {
       return n.f0.accept(this, argu);
   }
   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, Scope argu) {
       String _ret=null;
       String curr = n.f1.accept(this,null);
       if ( symbolTable.isDeclared(curr) == true) {
           printErrMsg(">Error: Class " + curr + " declared more than once.Parser will not parse the contents of this class.");
           return _ret;
       }
       else {
           symbolTable.addKnownTypes(curr);
       }
       ClassScope classScope = new ClassScope(0,0,curr);
       boolean res = symbolTable.putClassHash(curr,classScope);
       if ( res == false)
           printErrMsg(">PANIC we should have catched this error before.Error: Class declared more than once.");
       n.f3.accept(this,classScope);
       n.f4.accept(this,classScope);
       return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, Scope argu) {
      String _ret=null;

      String base = n.f3.accept(this,null);
      String curr = n.f1.accept(this,null);
      ClassScope classScope;
      if ( symbolTable.isDeclared(curr)== true) {
          printErrMsg(">Error: Class " + curr + " declared more than once.Parser will not parse the contents of this class.");
          return _ret;
      }
      else {
          symbolTable.addKnownTypes(curr);
      }
      //base class hasnt been declared yet (error). We parse the class like it has't any parents.
      if ( symbolTable.isDeclared(base) == false) {
          printErrMsg(">Error:Extended class " + base + " has not been declared.");
          classScope = new ClassScope(0,0,curr);
          boolean res = symbolTable.putClassHash(curr,classScope);
          if ( res == false)
              printErrMsg(">PANIC we should have catched this error before.Error: Class declared more than once.");
      }
      //base class has been declared.
      else {
          classScope = new ClassScope(symbolTable.findVarSizeof(base), symbolTable.findFuncSizeof(base), curr);
          boolean res = symbolTable.putClassHash(curr, classScope);
          if (res == false)
              printErrMsg(">PANIC we should have catched this error before.Error: Class declared more than once.");
          ClassScope baseClassScope = symbolTable.getClassHash(base);
          boolean res2 = symbolTable.putScopeInheritanceChain(classScope, baseClassScope);
          if (res2 == false)
              printErrMsg("PANIC. Insert two times class at mother chain.");

      }
      //parse methods and vardecls at either case...
       n.f5.accept(this,classScope);
       n.f6.accept(this,classScope);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, Scope argu) {
      String _ret=null;
      if ( argu.put(n.f1.accept(this, argu),n.f0.accept(this, argu)) == false ) {
          printErrMsg(">Error:Variable " + n.f1.accept(this,argu) + " with type "+ n.f0.accept(this,argu) + " declared more than once.");
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   //argu here is of type ClassScope.
   public String visit(MethodDeclaration n, Scope argu) {
      String _ret=null;
      ClassScope classScope = null;
      if ( argu instanceof ClassScope) {
          classScope = (ClassScope) argu;
      }
      else {
          printErrMsg("PANIC.Expected ClassScope.");
          return _ret;
      }
      String funcName = n.f2.accept(this,null);
      Scope scope = new Scope(funcName);
      FuncSignature funcSignature = new FuncSignature(n.f1.accept(this,null));
      //fill the hashtables of symbolTable class...
      //if we have function overloading within the same class, then return and pretend this function never apperead (i.e dont fill the Maps and dont parse the vardecls).
      if ( classScope.putFuncBind(funcName,funcSignature) == false || symbolTable.putFuncHash(funcName,classScope.getName(),scope) == false) {
          printErrMsg(">Error:Function " + funcName + " in class " + classScope.getClassName() + " declared twice");
          return _ret;
      }
       //fill the hashtable of class Scope ...
      if (symbolTable.putScopeInheritanceChain(scope,classScope) == false)
          printErrMsg("PANIC. We have already put this scope to inheritance chain.");
      n.f4.accept(this, scope);
      n.f7.accept(this, scope);
      //Currently implemented: if we have function overloading from a parent class, KEEP the maps associated with it it in SymbolTable.
      //Idea not implemented yet and possibly never:if we have function overloading from a parent class, then REMOVE all from symbolTable all Maps associated with this class ...
      // (i.e. we should remove funcSignature from ClassScope, Scope from funcHash and ClassScope from mother chain).
      if (symbolTable.checkOverride(funcName,classScope.getClassName()) == false )
          printErrMsg("");
      return _ret;
   }


   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, Scope argu) {
      String _ret=null;
      ClassScope classScope = symbolTable.getScopeInheritanceChain(argu);
      if ( classScope == null) {
          printErrMsg("PANIC.mother chain returned null");
          return _ret;
      }
      FuncSignature funcSignature = classScope.getFuncBind(argu.getName());
      if ( funcSignature == null) {
          printErrMsg("PANIC.funcsign hash returned null");
          return _ret;
      }
      funcSignature.addArg(n.f0.accept(this, argu));
      boolean res = argu.put(n.f1.accept(this,argu),n.f0.accept(this,argu));
      if ( res == false) {
          printErrMsg(">Error:Variable " + n.f1.accept(this,argu) + " declared twice.");
      }
      return _ret;
   }


   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public String visit(Type n, Scope argu) {
      String s = n.f0.accept(this, null);
      if ( symbolTable.isDeclared(s) == false)
          symbolTable.addUndeclared(s);
      return s;

   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n, Scope argu) {
       return n.f0.accept(this, argu) + n.f1.accept(this, argu) + n.f2.accept(this, argu);
   }
}



